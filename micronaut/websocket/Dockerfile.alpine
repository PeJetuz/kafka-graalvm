ARG KAFKA_BOOTSTRAP_SERVERS_DEFAULT=kafka-server2:9092
ARG SCHEMA_REGISTRY_URL_DEFAULT=http://schema-registry:8081

FROM ghcr.io/graalvm/native-image-community:23.0.2-muslib-ol9 AS build

ARG KAFKA_BOOTSTRAP_SERVERS_DEFAULT
ARG SCHEMA_REGISTRY_URL_DEFAULT
ENV KAFKA_BOOTSTRAP_SERVERS=$KAFKA_BOOTSTRAP_SERVERS_DEFAULT
ENV SCHEMA_REGISTRY_URL=$SCHEMA_REGISTRY_URL_DEFAULT

WORKDIR /usr/share

# Install maven
RUN set -x && \
    curl -O https://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz && \
    tar -xvf apache-maven-*-bin.tar.gz  && \
    rm apache-maven-*-bin.tar.gz && \
    mv apache-maven-* maven && \
    ln -s /usr/share/maven/bin/mvn /bin/

WORKDIR /micronaut

# Create a first layer to cache the "Maven World" in the local repository.
# Incremental docker builds will always resume after that, unless you update
# the pom
ADD pom.xml .
RUN mvn package

# Do the Maven build!
# Incremental docker builds will resume here when you change sources
ADD src src
RUN mvn package -Dpackaging=native-image -Dalpine -Dmaven.test.skip=true

RUN echo "done!"
#CMD ["/bin/ash"]

# 2nd stage, build the runtime image
FROM alpine:3.21.3

ARG KAFKA_BOOTSTRAP_SERVERS_DEFAULT
ARG SCHEMA_REGISTRY_URL_DEFAULT
ENV KAFKA_BOOTSTRAP_SERVERS=$KAFKA_BOOTSTRAP_SERVERS_DEFAULT
ENV SCHEMA_REGISTRY_URL=$SCHEMA_REGISTRY_URL_DEFAULT

#RUN apk --no-cache add mc
#RUN apk --no-cache add ca-certificates
#RUN wget http://dl-cdn.alpinelinux.org/alpine/v3.18/community/x86_64/java-snappy-native-1.1.8.4-r0.apk && \
#    apk add java-snappy-native-1.1.8.4-r0.apk && \
#	rm -rf java-snappy-native-1.1.8.4-r0.apk

ADD lib /usr/lib
WORKDIR /usr/lib
RUN ln libstdc++.so.6.0.33 libstdc++.so.6 && \
    ln libsnappyjava.so.1.1.8 libsnappyjava.so && \
    ln libsnappy.so.1.1.10 libsnappy.so.1 && \
    ln libzstd-jni-1.5.5-6.so libzstd-jni.so

WORKDIR /micronaut

# Copy the binary built in the 1st stage
COPY --from=build /micronaut/target/demo .

#WORKDIR /
#CMD ["/bin/sh"]
ENTRYPOINT ["/micronaut/demo", "-DZstdNativePath=/usr/lib/libzstd-jni.so"]
