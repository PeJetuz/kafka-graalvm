{
  "reflection": [
    {
      "type": "[B"
    },
    {
      "type": "[C"
    },
    {
      "type": "[D"
    },
    {
      "type": "[F"
    },
    {
      "type": "[I"
    },
    {
      "type": "[J"
    },
    {
      "type": "[Lcom.fasterxml.jackson.databind.deser.Deserializers;"
    },
    {
      "type": "[Lio.micronaut.http.HttpMethod;"
    },
    {
      "type": "[Ljava.lang.Object;"
    },
    {
      "type": "[Ljava.lang.String;"
    },
    {
      "type": "[Ljavax.management.openmbean.CompositeData;"
    },
    {
      "type": "[S"
    },
    {
      "type": "[Z"
    },
    {
      "type": "ch.qos.logback.classic.encoder.PatternLayoutEncoder",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "ch.qos.logback.classic.joran.SerializedModelConfigurator",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "ch.qos.logback.classic.spi.LogbackServiceProvider"
    },
    {
      "type": "ch.qos.logback.classic.util.DefaultJoranConfigurator",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "ch.qos.logback.core.ConsoleAppender",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "ch.qos.logback.core.OutputStreamAppender",
      "methods": [
        {
          "name": "setEncoder",
          "parameterTypes": [
            "ch.qos.logback.core.encoder.Encoder"
          ]
        }
      ]
    },
    {
      "type": "ch.qos.logback.core.encoder.Encoder"
    },
    {
      "type": "ch.qos.logback.core.encoder.LayoutWrappingEncoder",
      "methods": [
        {
          "name": "setParent",
          "parameterTypes": [
            "ch.qos.logback.core.spi.ContextAware"
          ]
        }
      ]
    },
    {
      "type": "ch.qos.logback.core.pattern.PatternLayoutEncoderBase",
      "methods": [
        {
          "name": "setPattern",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "ch.qos.logback.core.spi.ContextAware"
    },
    {
      "type": "com.aayushatharva.brotli4j.Brotli4jLoader"
    },
    {
      "type": "com.example.$ChatServerWebSocket$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.example.$KafkaMsgListener$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.example.$KafkaProducer$Intercepted$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.github.luben.zstd.Zstd"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$EnumOptions"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$EnumOptions$Builder"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$EnumValueOptions"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FeatureSet"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$Builder"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$CType"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$EditionDefault"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$JSType"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$OptionRetention"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FieldOptions$OptionTargetType"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FileOptions"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FileOptions$Builder"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$MessageOptions"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$MessageOptions$Builder"
    },
    {
      "type": "com.google.protobuf.DescriptorProtos$UninterpretedOption"
    },
    {
      "type": "com.google.protobuf.Extension"
    },
    {
      "type": "com.google.protobuf.ExtensionRegistry",
      "methods": [
        {
          "name": "add",
          "parameterTypes": [
            "com.google.protobuf.Extension"
          ]
        },
        {
          "name": "getEmptyRegistry",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.google.protobuf.GeneratedMessageV3$ExtendableMessage",
      "methods": [
        {
          "name": "getExtensionFields",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.AESCipher$General",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.ARCFOURCipher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.ChaCha20Cipher$ChaCha20Poly1305",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.DESCipher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.DESedeCipher",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.crypto.provider.GaloisCounterMode$AESGCM",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "com.sun.management.GarbageCollectorMXBean"
    },
    {
      "type": "com.sun.management.GcInfo"
    },
    {
      "type": "com.sun.management.HotSpotDiagnosticMXBean"
    },
    {
      "type": "com.sun.management.ThreadMXBean"
    },
    {
      "type": "com.sun.management.UnixOperatingSystemMXBean"
    },
    {
      "type": "com.sun.management.VMOption"
    },
    {
      "type": "com.sun.management.internal.GarbageCollectorExtImpl"
    },
    {
      "type": "com.sun.management.internal.HotSpotDiagnostic"
    },
    {
      "type": "com.sun.management.internal.HotSpotThreadImpl"
    },
    {
      "type": "com.sun.management.internal.OperatingSystemImpl"
    },
    {
      "type": "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.Metadata",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.Rule",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.RuleKind",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.RuleMode",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.RuleSet",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaEntity",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaEntity$EntityType",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaReference",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaString",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setSchemaString",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "setSchemaType",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaTags",
      "allDeclaredFields": true
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.SchemaTypeConverter",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.requests.RegisterSchemaRequest",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "getId",
          "parameterTypes": []
        },
        {
          "name": "getMetadata",
          "parameterTypes": []
        },
        {
          "name": "getReferences",
          "parameterTypes": []
        },
        {
          "name": "getRuleSet",
          "parameterTypes": []
        },
        {
          "name": "getSchema",
          "parameterTypes": []
        },
        {
          "name": "getSchemaTagsToAdd",
          "parameterTypes": []
        },
        {
          "name": "getSchemaTagsToRemove",
          "parameterTypes": []
        },
        {
          "name": "getSchemaType",
          "parameterTypes": []
        },
        {
          "name": "getVersion",
          "parameterTypes": []
        },
        {
          "name": "isPropagateSchemaTags",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.schemaregistry.client.rest.entities.requests.RegisterSchemaResponse",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setId",
          "parameterTypes": [
            "int"
          ]
        }
      ]
    },
    {
      "type": "io.confluent.kafka.schemaregistry.rules.DlqAction"
    },
    {
      "type": "io.confluent.kafka.serializers.context.NullContextNameStrategy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.serializers.subject.DefaultReferenceSubjectNameStrategy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.confluent.kafka.serializers.subject.TopicNameStrategy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micrometer.context.ContextRegistry"
    },
    {
      "type": "io.micrometer.context.ContextSnapshotFactory"
    },
    {
      "type": "io.micrometer.context.ThreadLocalAccessor"
    },
    {
      "type": "io.micronaut.aop.internal.InterceptorRegistryBean",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.buffer.netty.$DefaultByteBufAllocatorConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.buffer.netty.$NettyByteBufferFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.buffer.netty.NettyByteBufferConverters",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$BeanConfiguration",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$DefaultProducerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$KafkaConsumerFactory$CreateConsumer0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$KafkaConsumerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$KafkaProducerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.$KafkaProducerFactory$GetProducer0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.admin.$AdminClientFactory$AdminClient0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.admin.$AdminClientFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.admin.$KafkaNewTopics$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$ConsumerRecordBinderRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$KafkaHeadersBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$KafkaKeyBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$KafkaMessageHeaderBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$KafkaMessagingBodyBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.$KafkaPartitionBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.bind.batch.$BatchConsumerRecordsBinderRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$DefaultKafkaConsumerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$DefaultKafkaListenerExceptionHandlerConfigurationProperties$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$DefaultKafkaProducerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$KafkaConsumerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$KafkaDefaultConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$KafkaHealthConfigurationProperties$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.config.$KafkaProducerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.convert.$KafkaHeaderConverter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.exceptions.$DefaultKafkaListenerExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.executor.$ConsumerExecutorServiceConfig$Configuration0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.executor.$ConsumerExecutorServiceConfig$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.health.$DefaultNetworkClientCreator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.health.$KafkaHealthIndicator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.intercept.$KafkaClientIntroductionAdvice$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.metrics.$KafkaConsumerMetrics$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.metrics.$KafkaProducerMetrics$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.processor.$KafkaConsumerGroupManager$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.processor.$KafkaConsumerProcessor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.retry.$DefaultConditionalRetryBehaviourHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.serde.$CompositeSerdeRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.serde.$JsonObjectSerde$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.serde.$JsonSerdeRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.tracing.brave.$BraveKafkaConsumerTracingInstrumentation$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.tracing.brave.$BraveKafkaProducerTracingInstrumentation$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.tracing.brave.$BraveKafkaTracingFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.configuration.kafka.tracing.brave.$BraveKafkaTracingFactory$KafkaTracing0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.context.DefaultBeanContext$BeanDefinitionProducer",
      "fields": [
        {
          "name": "definition"
        }
      ]
    },
    {
      "type": "io.micronaut.context.annotation.Prototype"
    },
    {
      "type": "io.micronaut.context.env.PropertiesPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.context.env.exp.RandomPropertyExpressionResolver",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.context.env.yaml.YamlPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.context.event.ApplicationEventPublisherFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.context.propagation.instrument.execution.$ExecutorServiceInstrumenter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.core.async.ReactiveStreamsTypeInformationProvider"
    },
    {
      "type": "io.micronaut.core.async.converters.ReactiveTypeConverterRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.core.async.publisher.CompletableFuturePublisher"
    },
    {
      "type": "io.micronaut.core.async.publisher.Publishers$JustPublisher"
    },
    {
      "type": "io.micronaut.core.async.publisher.Publishers$JustThrowPublisher"
    },
    {
      "type": "io.micronaut.core.async.subscriber.Completable"
    },
    {
      "type": "io.micronaut.discovery.$DefaultCompositeDiscoveryClient$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.discovery.$DefaultServiceInstanceIdGenerator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.discovery.cloud.digitalocean.$DigitalOceanInstanceMetadata$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.discovery.config.$DefaultCompositeConfigurationClient$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.health.$DefaultCurrentHealthStatus$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.health.$HealthStatus$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.health.$HeartbeatConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.health.$HeartbeatDiscoveryClientCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.health.$HeartbeatTask$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.HttpTypeConverterRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.bind.$DefaultRequestBinderRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.bind.binders.$DefaultBodyAnnotationBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$ByteArrayBodyHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$ByteBufferBodyHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$CharSequenceBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$ConversionTextPlainHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$DefaultMessageBodyHandlerRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$StringBodyReader$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$TextPlainObjectBodyReader$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$TextPlainObjectBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$TextStreamBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.body.$WritableBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$BeanConfiguration",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultConnectionPoolConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultHttp2ClientConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultWebSocketCompressionConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$DefaultHttpClientConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$DefaultLoadBalancerResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceConnectionPoolConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceHttp2ClientConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultTrustStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceWebSocketCompressionConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientFactory$HealthCheckStarter1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.$ServiceHttpClientFactory$ServiceInstanceList0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.bind.$DefaultHttpClientBinderRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.filter.$DefaultHttpClientFilterResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.interceptor.$HttpClientIntroductionAdvice$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.interceptor.configuration.$DefaultClientVersioningConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.interceptor.configuration.$NamedClientVersioningConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.loadbalance.$DiscoveryClientLoadBalancerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.loadbalance.$ServiceInstanceListLoadBalancerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.client.loadbalance.LoadBalancerConverters",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.codec.$CodecConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.converters.$HttpConverterRegistrar$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.converters.SharedHttpConvertersRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.expression.$RequestConditionContext$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.form.$FormConfigurationProperties$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$AbstractResource$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$DefaultLink$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$GenericResource$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$JsonError$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$Resource$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.hateoas.$VndError$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.body.$NettyByteBufMessageBodyHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.body.$NettyJsonHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.body.$NettyJsonStreamHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.body.$NettyWritableBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$DefaultEventLoopGroup1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$EventLoopGroup0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$EpollAvailabilityCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$EpollEventLoopGroupFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$IoUringAvailabilityCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$IoUringEventLoopGroupFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$KQueueAvailabilityCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$KQueueEventLoopGroupFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$NettyThreadFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$NettyThreadFactory$NettyThreadFactory0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.$NioEventLoopGroupFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.converters.$DefaultChannelOptionFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.converters.$EpollChannelOptionFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.channel.converters.$KQueueChannelOptionFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.configuration.$NettyGlobalConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.websocket.$NettyServerWebSocketBroadcaster$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.netty.websocket.$WebSocketMessageEncoder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.resource.$ResourceLoaderFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.resource.$ResourceLoaderFactory$FileSystemResourceLoader1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.resource.$ResourceLoaderFactory$GetClassPathResourceLoader0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.resource.$ResourceLoaderFactory$ResourceResolver2$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$CoroutineHelper$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$CorsConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$FileTypeHandlerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$HostResolutionConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$HttpLocaleResolutionConfigurationProperties$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$HttpServerConfiguration$MultipartConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$OptionsFilter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.$RouteExecutor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.HttpServerTypeConvertersRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.binding.$BasicAuthArgumentBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.binding.$LocaleArgumentBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.binding.$RequestArgumentSatisfier$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.binding.$RouteInfoArgumentBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.binding.$RouteMatchArgumentBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.body.$FileBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.body.$InputStreamBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.body.$StreamFileBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.body.$SystemFileBodyWriter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.codec.$TextStreamCodec$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.cors.$CorsFilter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$BufferLengthExceededHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$ContentLengthExceededHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$ConversionErrorHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$DuplicateRouteHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$HttpStatusHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$JacksonExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$JsonExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$NotAllowedExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$URISyntaxHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$UnsatisfiedArgumentHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.$UnsatisfiedRouteHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.response.$DefaultErrorResponseProcessor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.response.$DefaultHtmlErrorResponseBodyProvider$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.exceptions.response.$DefaultJsonErrorResponseBodyProvider$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.filter.$DefaultFilterBodyParser$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.$DefaultHttpCompressionStrategy$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$BuildDefaultServer0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.$NettyRequestArgumentSatisfier$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.NettyHttpResponseFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.NettyHttpServer$1"
    },
    {
      "type": "io.micronaut.http.server.netty.NettyHttpServer$Listener"
    },
    {
      "type": "io.micronaut.http.server.netty.binders.$NettyServerRequestBinderRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$AccessLogger$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Http2Settings$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Http3Settings$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$NettyListenerConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Parent$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Worker$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.converters.$NettyConverters$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.converters.NettyConvertersSpi",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.discovery.$NettyEmbeddedServerInstance$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.discovery.$NettyServiceDiscovery$ApplicationEventListener$onStart1$Intercepted$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.discovery.$NettyServiceDiscovery$ApplicationEventListener$onStop2$Intercepted$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.discovery.$NettyServiceDiscovery$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.handler.PipeliningServerHandler"
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$BuildSelfSignedCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$CertificateProvidedSslBuilder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$CertificateProvidedSslBuilder$SelfSignedNotConfigured$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$SelfSignedSslBuilder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$SelfSignedSslBuilder$SelfSignedConfigured$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.ssl.$SslEnabledCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.websocket.$WebSocketUpgradeHandlerFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.netty.websocket.NettyServerWebSocketHandler"
    },
    {
      "type": "io.micronaut.http.server.util.$DefaultHttpClientAddressResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.$DefaultHttpHostResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$CompositeHttpLocaleResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$CookieLocaleResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$HttpFixedLocaleResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Intercepted$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.util.locale.$RequestLocaleResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.server.websocket.$ServerWebSocketProcessor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultTrustStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ClientSslConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultTrustStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$DefaultSslConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultTrustStoreConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.ssl.$ServerSslConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.uri.$DefaultFormUrlEncodedDecoder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.util.$HtmlEntityEncodingHtmlSanitizer$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.util.$OutgoingHttpRequestProcessorImpl$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.http.util.HttpTypeInformationProvider"
    },
    {
      "type": "io.micronaut.inject.annotation.AnnotationConvertersRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.inject.provider.BeanProviderDefinition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.inject.provider.JakartaProviderBeanDefinition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.inject.provider.JavaxProviderBeanDefinition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.inject.provider.ProviderTypeInformationProvider"
    },
    {
      "type": "io.micronaut.jackson.core.env.CloudFoundryVcapApplicationPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.jackson.core.env.CloudFoundryVcapServicesPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.jackson.core.env.EnvJsonPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.jackson.core.env.JsonPropertySourceLoader",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.$JsonObjectSerializer$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.bind.$JsonBeanPropertyBinder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.body.$JsonMessageHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.codec.$JsonMediaTypeCodec$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.codec.$JsonStreamMediaTypeCodec$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.json.convert.$JsonConverterRegistrar$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.logging.$LogLevel$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.logging.$PropertiesLoggingLevelsConfigurer$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.logging.LoggingConverterRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.logging.impl.$Log4jLoggingSystem$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.logging.impl.$LogbackLoggingSystem$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.messaging.$MessagingApplication$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.config.$ReactorConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.convert.$ReactorToRxJava2ConverterRegistrar$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.convert.$ReactorToRxJava3ConverterRegistrar$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.convert.ReactorConverterRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.instrument.$ReactorAutomaticContextPropagation$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.reactor.instrument.$ReactorInstrumentation$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.$ApplicationConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.$ApplicationConfiguration$InstanceConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.beans.$MapperIntroduction$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.beans.$MapperMethodProcessor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.$CompositeMessageSource$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.env.$ConfigurationIntroductionAdvice$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.scope.$ThreadLocalCustomScope$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.scope.refresh.$RefreshInterceptor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.scope.refresh.$RefreshScope$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.context.scope.refresh.$RefreshScopeCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.converters.time.TimeConverterRegistrar",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$MediaTypeCodecRegistry0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.http.codec.$TextPlainCodec$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.http.scope.$RequestCustomScope$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.runtime.server.watch.event.$FileWatchRestartListener$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.$DefaultTaskExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.$LoomSupport$LoomCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.$ScheduledExecutorTaskScheduler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.async.$AsyncInterceptor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$DefaultExecutorSelector$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$DefaultThreadFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$DefaultThreadFactory$ThreadFactory0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$ExecutorFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$ExecutorFactory$EventLoopGroupThreadFactory0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$ExecutorFactory$ExecutorService1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Blocking2$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Io0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Virtual1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Configuration0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.executor.$UserExecutorConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.io.watch.$DefaultWatchThread$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.io.watch.$FileWatchCondition$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.io.watch.$FileWatchConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.io.watch.$WatchServiceFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.io.watch.$WatchServiceFactory$WatchService0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.processor.$ScheduledMethodProcessor$ApplicationEventListener$scheduleTasks1$Intercepted$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.scheduling.processor.$ScheduledMethodProcessor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.config.$DefaultDeserializationConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.config.$DefaultSerdeConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.config.$DefaultSerializationConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.jackson.$JacksonJsonMapper$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.jackson.$SerdeJacksonConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$DefaultSerdeIntrospections$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$DefaultSerdeRegistry$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$InetAddressSerde6$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$InstantSerde7$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$LocalDateSerde8$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$LocalDateTimeSerde9$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$LocalTimeSerde10$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$OffsetDateTimeSerde11$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideDeserializer1$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideObjectArraySerde5$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideObjectDeserializer4$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideObjectSerializer3$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideSerde0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ProvideSerializer2$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$YearSerde12$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$LegacyBeansFactory$ZonedDateTimeSerde13$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$java_lang_StackTraceElement$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$java_lang_management_LockInfo$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.$java_lang_management_ThreadInfo$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.bind.$SerdeJsonBeanPropertyBinderExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.config.$SerdeJsonConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.deserializers.$HealthResultDeserializer$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.deserializers.$HealthResultDeserializer$HealthResultDto$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.serde.support.serdes.$HealthStatusSerde$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.$ValidatingInterceptor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.exceptions.$ConstraintExceptionHandler$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.$DefaultAnnotatedElementValidator$LocalConstraintValidators$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.$DefaultClockProvider$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.$DefaultValidator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.$DefaultValidatorConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.$DefaultValidatorFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$DefaultConstraintValidators$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$DefaultConstraintValidators$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$DefaultInternalConstraintValidatorFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$EmailValidator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$InternalConstraintValidators$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.constraints.$PatternValidator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.extractors.$DefaultValueExtractors$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.extractors.$DefaultValueExtractors$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.extractors.$InternalValueExtractors$Introspection",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.messages.$DefaultMessageInterpolator$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.messages.$DefaultMessages$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.messages.$HttpInterpolatorLocaleResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.validation.validator.resolver.$CompositeTraversableResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.$AnnotatedFilterRouteBuilder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.$AnnotatedMethodRouteBuilder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.$DefaultRouter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.$ServerFilterRouteBuilder$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.naming.$HyphenatedUriNamingStrategy$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.resource.$StaticResourceConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.resource.$StaticResourceResolverFactory$Build0$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.resource.$StaticResourceResolverFactory$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.$ConfigurationDefaultVersionProvider$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.$RouteVersionFilter$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.$RoutesVersioningConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.$VersionAwareRouterListener$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.resolution.$HeaderVersionResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.resolution.$HeaderVersionResolverConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.resolution.$ParameterVersionResolver$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.web.router.version.resolution.$ParameterVersionResolverConfiguration$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.micronaut.websocket.interceptor.$ClientWebSocketInterceptor$Definition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "io.netty.bootstrap.ServerBootstrap$1"
    },
    {
      "type": "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor"
    },
    {
      "type": "io.netty.buffer.AbstractByteBufAllocator"
    },
    {
      "type": "io.netty.buffer.AbstractReferenceCountedByteBuf",
      "fields": [
        {
          "name": "refCnt"
        }
      ]
    },
    {
      "type": "io.netty.channel.AbstractChannelHandlerContext",
      "fields": [
        {
          "name": "handlerState"
        }
      ]
    },
    {
      "type": "io.netty.channel.ChannelOutboundBuffer",
      "fields": [
        {
          "name": "totalPendingSize"
        },
        {
          "name": "unwritable"
        }
      ]
    },
    {
      "type": "io.netty.channel.DefaultChannelConfig",
      "fields": [
        {
          "name": "autoRead"
        },
        {
          "name": "writeBufferWaterMark"
        }
      ]
    },
    {
      "type": "io.netty.channel.DefaultChannelPipeline",
      "fields": [
        {
          "name": "estimatorHandle"
        }
      ]
    },
    {
      "type": "io.netty.channel.DefaultChannelPipeline$HeadContext"
    },
    {
      "type": "io.netty.channel.DefaultChannelPipeline$TailContext"
    },
    {
      "type": "io.netty.channel.embedded.EmbeddedChannel$2"
    },
    {
      "type": "io.netty.handler.codec.compression.JdkZlibDecoder"
    },
    {
      "type": "io.netty.handler.codec.compression.JdkZlibEncoder"
    },
    {
      "type": "io.netty.handler.codec.http.HttpServerCodec"
    },
    {
      "type": "io.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder"
    },
    {
      "type": "io.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder"
    },
    {
      "type": "io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateDecoder"
    },
    {
      "type": "io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateEncoder"
    },
    {
      "type": "io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler"
    },
    {
      "type": "io.netty.handler.timeout.IdleStateHandler"
    },
    {
      "type": "io.netty.util.DefaultAttributeMap",
      "fields": [
        {
          "name": "attributes"
        }
      ]
    },
    {
      "type": "io.netty.util.DefaultAttributeMap$DefaultAttribute",
      "fields": [
        {
          "name": "attributeMap"
        }
      ]
    },
    {
      "type": "io.netty.util.Recycler$DefaultHandle",
      "fields": [
        {
          "name": "state"
        }
      ]
    },
    {
      "type": "io.netty.util.ReferenceCountUtil"
    },
    {
      "type": "io.netty.util.concurrent.DefaultPromise",
      "fields": [
        {
          "name": "result"
        }
      ]
    },
    {
      "type": "io.netty.util.concurrent.SingleThreadEventExecutor",
      "fields": [
        {
          "name": "state"
        },
        {
          "name": "threadProperties"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
      "fields": [
        {
          "name": "producerLimit"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
      "fields": [
        {
          "name": "consumerIndex"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
      "fields": [
        {
          "name": "producerIndex"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueConsumerIndexField",
      "fields": [
        {
          "name": "consumerIndex"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerIndexField",
      "fields": [
        {
          "name": "producerIndex"
        }
      ]
    },
    {
      "type": "io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerLimitField",
      "fields": [
        {
          "name": "producerLimit"
        }
      ]
    },
    {
      "type": "io.reactivex.Completable"
    },
    {
      "type": "io.reactivex.Maybe"
    },
    {
      "type": "io.reactivex.Observable"
    },
    {
      "type": "io.reactivex.Single"
    },
    {
      "type": "io.reactivex.rxjava3.core.Completable"
    },
    {
      "type": "io.reactivex.rxjava3.core.Flowable"
    },
    {
      "type": "io.reactivex.rxjava3.core.Maybe"
    },
    {
      "type": "io.reactivex.rxjava3.core.Observable"
    },
    {
      "type": "io.reactivex.rxjava3.core.Single"
    },
    {
      "type": "java.beans.Introspector"
    },
    {
      "type": "java.io.FilePermission"
    },
    {
      "type": "java.io.Serializable"
    },
    {
      "type": "java.lang.Boolean",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Byte",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Character",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Comparable"
    },
    {
      "type": "java.lang.Deprecated"
    },
    {
      "type": "java.lang.Double",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Float",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Integer",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Iterable"
    },
    {
      "type": "java.lang.Long",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.ProcessHandle",
      "methods": [
        {
          "name": "current",
          "parameterTypes": []
        },
        {
          "name": "pid",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.RuntimePermission"
    },
    {
      "type": "java.lang.Short",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.StackTraceElement"
    },
    {
      "type": "java.lang.String",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.Thread",
      "fields": [
        {
          "name": "threadLocalRandomProbe"
        }
      ],
      "methods": [
        {
          "name": "ofVirtual",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.lang.Thread$Builder",
      "methods": [
        {
          "name": "factory",
          "parameterTypes": []
        },
        {
          "name": "name",
          "parameterTypes": [
            "java.lang.String",
            "long"
          ]
        }
      ]
    },
    {
      "type": "java.lang.Thread$Builder$OfVirtual"
    },
    {
      "type": "java.lang.Void",
      "fields": [
        {
          "name": "TYPE"
        }
      ]
    },
    {
      "type": "java.lang.management.BufferPoolMXBean"
    },
    {
      "type": "java.lang.management.ClassLoadingMXBean"
    },
    {
      "type": "java.lang.management.CompilationMXBean"
    },
    {
      "type": "java.lang.management.LockInfo"
    },
    {
      "type": "java.lang.management.ManagementPermission",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.lang.management.MemoryMXBean"
    },
    {
      "type": "java.lang.management.MemoryManagerMXBean"
    },
    {
      "type": "java.lang.management.MemoryPoolMXBean"
    },
    {
      "type": "java.lang.management.MemoryUsage"
    },
    {
      "type": "java.lang.management.MonitorInfo"
    },
    {
      "type": "java.lang.management.PlatformLoggingMXBean"
    },
    {
      "type": "java.lang.management.RuntimeMXBean"
    },
    {
      "type": "java.lang.management.ThreadInfo"
    },
    {
      "type": "java.math.BigDecimal"
    },
    {
      "type": "java.math.BigInteger"
    },
    {
      "type": "java.net.NetPermission"
    },
    {
      "type": "java.net.SocketPermission"
    },
    {
      "type": "java.net.URLPermission",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.nio.Bits",
      "fields": [
        {
          "name": "MAX_MEMORY"
        },
        {
          "name": "UNALIGNED"
        }
      ]
    },
    {
      "type": "java.nio.Buffer",
      "fields": [
        {
          "name": "address"
        }
      ]
    },
    {
      "type": "java.nio.ByteBuffer"
    },
    {
      "type": "java.nio.DirectByteBuffer"
    },
    {
      "type": "java.nio.channels.spi.SelectorProvider"
    },
    {
      "type": "java.security.AlgorithmParametersSpi"
    },
    {
      "type": "java.security.AllPermission"
    },
    {
      "type": "java.security.KeyStoreSpi"
    },
    {
      "type": "java.security.SecurityPermission"
    },
    {
      "type": "java.sql.Date"
    },
    {
      "type": "java.sql.Timestamp"
    },
    {
      "type": "java.util.Collection"
    },
    {
      "type": "java.util.Collections$UnmodifiableCollection",
      "allDeclaredFields": true
    },
    {
      "type": "java.util.Collections$UnmodifiableList",
      "allDeclaredFields": true
    },
    {
      "type": "java.util.Collections$UnmodifiableRandomAccessList",
      "allDeclaredFields": true
    },
    {
      "type": "java.util.Date"
    },
    {
      "type": "java.util.List"
    },
    {
      "type": "java.util.PropertyPermission",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.util.RandomAccess"
    },
    {
      "type": "java.util.concurrent.Executors",
      "methods": [
        {
          "name": "newThreadPerTaskExecutor",
          "parameterTypes": [
            "java.util.concurrent.ThreadFactory"
          ]
        }
      ]
    },
    {
      "type": "java.util.concurrent.ForkJoinTask",
      "fields": [
        {
          "name": "aux"
        },
        {
          "name": "status"
        }
      ]
    },
    {
      "type": "java.util.concurrent.atomic.AtomicBoolean",
      "fields": [
        {
          "name": "value"
        }
      ]
    },
    {
      "type": "java.util.concurrent.atomic.Striped64",
      "fields": [
        {
          "name": "base"
        },
        {
          "name": "cellsBusy"
        }
      ]
    },
    {
      "type": "java.util.concurrent.atomic.Striped64$Cell",
      "fields": [
        {
          "name": "value"
        }
      ]
    },
    {
      "type": "java.util.logging.LogManager",
      "methods": [
        {
          "name": "getLoggingMXBean",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.util.logging.LoggingMXBean"
    },
    {
      "type": "java.util.zip.CRC32C",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "java.util.zip.Checksum",
      "methods": [
        {
          "name": "update",
          "parameterTypes": [
            "java.nio.ByteBuffer"
          ]
        }
      ]
    },
    {
      "type": "javax.management.MBeanOperationInfo"
    },
    {
      "type": "javax.management.MBeanServerBuilder",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "javax.management.ObjectName"
    },
    {
      "type": "javax.management.StandardEmitterMBean"
    },
    {
      "type": "javax.management.openmbean.CompositeData"
    },
    {
      "type": "javax.management.openmbean.OpenMBeanOperationInfoSupport"
    },
    {
      "type": "javax.management.openmbean.TabularData"
    },
    {
      "type": "javax.smartcardio.CardPermission"
    },
    {
      "type": "jdk.internal.jrtfs.JrtFileSystemProvider"
    },
    {
      "type": "jdk.internal.misc.Unsafe",
      "methods": [
        {
          "name": "getUnsafe",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "jdk.management.jfr.ConfigurationInfo"
    },
    {
      "type": "jdk.management.jfr.EventTypeInfo"
    },
    {
      "type": "jdk.management.jfr.FlightRecorderMXBean"
    },
    {
      "type": "jdk.management.jfr.FlightRecorderMXBeanImpl"
    },
    {
      "type": "jdk.management.jfr.RecordingInfo"
    },
    {
      "type": "jdk.management.jfr.SettingDescriptorInfo"
    },
    {
      "type": "kotlinx.coroutines.flow.Flow"
    },
    {
      "type": "kotlinx.coroutines.reactor.ReactorContext"
    },
    {
      "type": "libcore.io.Memory"
    },
    {
      "type": "my.test.protobuf.Envelop$Message",
      "methods": [
        {
          "name": "getMesssageList",
          "parameterTypes": []
        },
        {
          "name": "getSomeNumber",
          "parameterTypes": []
        },
        {
          "name": "getTopic",
          "parameterTypes": []
        },
        {
          "name": "getUser",
          "parameterTypes": []
        },
        {
          "name": "parseFrom",
          "parameterTypes": [
            "java.nio.ByteBuffer",
            "com.google.protobuf.ExtensionRegistryLite"
          ]
        }
      ]
    },
    {
      "type": "my.test.protobuf.Envelop$Message$Builder"
    },
    {
      "type": "org.apache.kafka.clients.consumer.CooperativeStickyAssignor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.apache.kafka.clients.consumer.RangeAssignor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.apache.kafka.common.serialization.StringDeserializer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.apache.kafka.common.serialization.StringSerializer",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.apache.kafka.common.utils.AppInfoParser$AppInfo"
    },
    {
      "type": "org.apache.kafka.common.utils.AppInfoParser$AppInfoMBean"
    },
    {
      "type": "org.apache.kafka.shaded.com.google.protobuf.ExtensionRegistry",
      "methods": [
        {
          "name": "getEmptyRegistry",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "org.osgi.framework.BundleEvent"
    },
    {
      "type": "org.robolectric.Robolectric"
    },
    {
      "type": "reactor.core.publisher.Flux"
    },
    {
      "type": "reactor.core.publisher.FluxCreate$BaseSink",
      "fields": [
        {
          "name": "disposable"
        },
        {
          "name": "requestConsumer"
        },
        {
          "name": "requested"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.FluxCreate$BufferAsyncSink",
      "fields": [
        {
          "name": "wip"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.FluxCreate$SerializedFluxSink",
      "fields": [
        {
          "name": "error"
        },
        {
          "name": "wip"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber",
      "fields": [
        {
          "name": "requested"
        },
        {
          "name": "s"
        },
        {
          "name": "thread"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.LambdaMonoSubscriber",
      "fields": [
        {
          "name": "subscription"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.LambdaSubscriber",
      "fields": [
        {
          "name": "subscription"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.Mono"
    },
    {
      "type": "reactor.core.publisher.Operators$BaseFluxToMonoOperator",
      "fields": [
        {
          "name": "state"
        }
      ]
    },
    {
      "type": "reactor.core.publisher.StrictSubscriber",
      "fields": [
        {
          "name": "error"
        },
        {
          "name": "requested"
        },
        {
          "name": "s"
        },
        {
          "name": "wip"
        }
      ]
    },
    {
      "type": "reactor.core.scheduler.DelegateServiceScheduler",
      "fields": [
        {
          "name": "state"
        }
      ]
    },
    {
      "type": "reactor.core.scheduler.WorkerTask",
      "fields": [
        {
          "name": "future"
        },
        {
          "name": "parent"
        },
        {
          "name": "thread"
        }
      ]
    },
    {
      "type": "reactor.util.concurrent.MpscLinkedQueue",
      "fields": [
        {
          "name": "consumerNode"
        },
        {
          "name": "producerNode"
        }
      ]
    },
    {
      "type": "reactor.util.concurrent.MpscLinkedQueue$LinkedQueueNode",
      "fields": [
        {
          "name": "next"
        }
      ]
    },
    {
      "type": "reactor.util.concurrent.SpscLinkedArrayQueue",
      "fields": [
        {
          "name": "consumerIndex"
        },
        {
          "name": "producerIndex"
        }
      ]
    },
    {
      "type": "reactor.util.context.ReactorContextAccessor"
    },
    {
      "type": "sun.management.ClassLoadingImpl"
    },
    {
      "type": "sun.management.CompilationImpl"
    },
    {
      "type": "sun.management.ManagementFactoryHelper$1"
    },
    {
      "type": "sun.management.ManagementFactoryHelper$PlatformLoggingImpl"
    },
    {
      "type": "sun.management.MemoryImpl"
    },
    {
      "type": "sun.management.MemoryManagerImpl"
    },
    {
      "type": "sun.management.MemoryPoolImpl"
    },
    {
      "type": "sun.management.RuntimeImpl"
    },
    {
      "type": "sun.misc.Unsafe",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "invokeCleaner",
          "parameterTypes": [
            "java.nio.ByteBuffer"
          ]
        }
      ]
    },
    {
      "type": "sun.nio.ch.SelectorImpl",
      "fields": [
        {
          "name": "publicSelectedKeys"
        },
        {
          "name": "selectedKeys"
        }
      ]
    },
    {
      "type": "sun.security.pkcs12.PKCS12KeyStore",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.pkcs12.PKCS12KeyStore$DualFormatPKCS12",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.NativePRNG",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.security.SecureRandomParameters"
          ]
        }
      ]
    },
    {
      "type": "sun.security.provider.SHA",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.provider.X509Factory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.rsa.RSAKeyFactory$Legacy",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.ssl.SSLContextImpl$TLS13Context",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "type": "sun.security.x509.AuthorityInfoAccessExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.AuthorityKeyIdentifierExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.BasicConstraintsExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.CRLDistributionPointsExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.CertificatePoliciesExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.ExtendedKeyUsageExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.IssuerAlternativeNameExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.KeyUsageExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.NetscapeCertTypeExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.PrivateKeyUsageExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.SubjectAlternativeNameExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    },
    {
      "type": "sun.security.x509.SubjectKeyIdentifierExtension",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.Boolean",
            "java.lang.Object"
          ]
        }
      ]
    }
  ],
  "resources": [
    {
      "glob": "META-INF/micronaut/"
    },
    {
      "glob": "META-INF/services/ch.qos.logback.classic.spi.Configurator"
    },
    {
      "glob": "META-INF/services/io.confluent.kafka.schemaregistry.rules.RuleAction"
    },
    {
      "glob": "META-INF/services/io.confluent.kafka.schemaregistry.rules.RuleExecutor"
    },
    {
      "glob": "META-INF/services/io.micrometer.context.ContextAccessor"
    },
    {
      "glob": "META-INF/services/io.micrometer.context.ThreadLocalAccessor"
    },
    {
      "glob": "META-INF/services/io.micronaut.context.ApplicationContextConfigurer"
    },
    {
      "glob": "META-INF/services/io.micronaut.context.env.PropertyExpressionResolver"
    },
    {
      "glob": "META-INF/services/io.micronaut.context.env.PropertySourceLoader"
    },
    {
      "glob": "META-INF/services/io.micronaut.core.beans.BeanIntrospectionReference"
    },
    {
      "glob": "META-INF/services/io.micronaut.core.convert.TypeConverterRegistrar"
    },
    {
      "glob": "META-INF/services/io.micronaut.core.optim.StaticOptimizations$Loader"
    },
    {
      "glob": "META-INF/services/io.micronaut.core.type.TypeInformationProvider"
    },
    {
      "glob": "META-INF/services/io.micronaut.http.HttpResponseFactory"
    },
    {
      "glob": "META-INF/services/java.lang.System$LoggerFinder"
    },
    {
      "glob": "META-INF/services/java.net.spi.InetAddressResolverProvider"
    },
    {
      "glob": "META-INF/services/java.net.spi.URLStreamHandlerProvider"
    },
    {
      "glob": "META-INF/services/java.nio.channels.spi.SelectorProvider"
    },
    {
      "glob": "META-INF/services/java.nio.file.spi.FileSystemProvider"
    },
    {
      "glob": "META-INF/services/java.time.zone.ZoneRulesProvider"
    },
    {
      "glob": "META-INF/services/javax.xml.parsers.SAXParserFactory"
    },
    {
      "glob": "META-INF/services/org.slf4j.spi.SLF4JServiceProvider"
    },
    {
      "glob": "application.json"
    },
    {
      "glob": "application.properties"
    },
    {
      "glob": "application.yml"
    },
    {
      "glob": "org-xerial-snappy.properties"
    },
    {
      "glob": "kafka/kafka-version.properties"
    },
    {
      "glob": "logback-test.scmo"
    },
    {
      "glob": "logback-test.xml"
    },
    {
      "glob": "logback.scmo"
    },
    {
      "glob": "logback.xml"
    },
    {
      "glob": "micronaut-banner.txt"
    },
    {
      "module": "java.xml",
      "glob": "jdk/xml/internal/jdkcatalog/JDKCatalog.xml"
    },
    {
      "module": "jdk.jfr",
      "glob": "jdk/jfr/internal/query/view.ini"
    }
  ],
  "bundles": [],
  "jni": [
    {
      "type": "[Lcom.sun.management.internal.DiagnosticCommandArgumentInfo;"
    },
    {
      "type": "[Lcom.sun.management.internal.DiagnosticCommandInfo;"
    },
    {
      "type": "com.sun.management.internal.DiagnosticCommandArgumentInfo",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "boolean",
            "boolean",
            "boolean",
            "int"
          ]
        }
      ]
    },
    {
      "type": "com.sun.management.internal.DiagnosticCommandInfo",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": [
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "java.lang.String",
            "boolean",
            "java.util.List"
          ]
        }
      ]
    },
    {
      "type": "java.lang.Boolean",
      "methods": [
        {
          "name": "getBoolean",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "type": "java.util.Arrays",
      "methods": [
        {
          "name": "asList",
          "parameterTypes": [
            "java.lang.Object[]"
          ]
        }
      ]
    },
    {
      "type": "sun.management.VMManagementImpl",
      "fields": [
        {
          "name": "compTimeMonitoringSupport"
        },
        {
          "name": "currentThreadCpuTimeSupport"
        },
        {
          "name": "objectMonitorUsageSupport"
        },
        {
          "name": "otherThreadCpuTimeSupport"
        },
        {
          "name": "remoteDiagnosticCommandsSupport"
        },
        {
          "name": "synchronizerUsageSupport"
        },
        {
          "name": "threadAllocatedMemorySupport"
        },
        {
          "name": "threadContentionMonitoringSupport"
        }
      ]
    }
  ]
}