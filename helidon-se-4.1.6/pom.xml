<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>my.test</groupId>
  <artifactId>helidon-kafka-graal</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!--
    ISO 8601, see http://en.wikipedia.org/wiki/ISO_8601. This
    property is defined in order to give us an ability to use ${maven.build.timestamp}
    later in the file
     -->
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
    <maven.compiler.source>23</maven.compiler.source>
    <maven.compiler.target>23</maven.compiler.target>
    <version.plugin.compiler>3.13.0</version.plugin.compiler>
    <version.plugin.jar>3.4.2</version.plugin.jar>
    <version.plugin.resources>3.3.1</version.plugin.resources>
    <version.plugin.nativeimage>0.10.5</version.plugin.nativeimage>
    <version.plugin.dependency>3.7.1</version.plugin.dependency>
    <version.plugin.exec>3.1.0</version.plugin.exec>
    <version.plugin.protobuf>0.6.1</version.plugin.protobuf>
    <version.plugin.failsafe>3.2.5</version.plugin.failsafe>

    <version.lib.asm>9.7.1</version.lib.asm>
    <version.lib.google-protobuf>3.25.5</version.lib.google-protobuf>
    <version.lib.grpc>1.70.0</version.lib.grpc>
    <version.lib.jakarta.jsonp-api>2.1.3</version.lib.jakarta.jsonp-api>
    <version.lib.junit>5.12.0</version.lib.junit>
    <version.lib.junit.platform.native>0.10.5</version.lib.junit.platform.native>
    <version.lib.junit-platform>1.12.0</version.lib.junit-platform>
    <version.plugin.shade>3.5.0</version.plugin.shade>
    <version.lib.hamcrest>1.3</version.lib.hamcrest>
    <version.lib.slf4j>2.0.16</version.lib.slf4j>
    <version.plugin.os>1.7.1</version.plugin.os>
    <version.kafka.protobuf.serializer>7.8.0</version.kafka.protobuf.serializer>
    <versio.kafka.clients>3.9.0</versio.kafka.clients>

    <mainClass>io.helidon.examples.quickstart.se.Main</mainClass>
    <alpine>--libc=musl</alpine>

    <helidon.version>4.1.6</helidon.version>

    <kafka.image>bitnami/kafka:3.9.0</kafka.image>
    <kafka.name>kafka</kafka.name>
    <schema-registry.image>bitnami/schema-registry:7.8.0</schema-registry.image>
    <schema-registry.name>schema-registry</schema-registry.name>

  </properties>

  <dependencies>
    <dependency>
      <groupId>io.helidon.webserver</groupId>
      <artifactId>helidon-webserver</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.config</groupId>
      <artifactId>helidon-config-yaml</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.observe</groupId>
      <artifactId>helidon-webserver-observe-health</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.health</groupId>
      <artifactId>helidon-health-checks</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.json</groupId>
      <artifactId>jakarta.json-api</artifactId>
      <version>${version.lib.jakarta.jsonp-api}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.http.media</groupId>
      <artifactId>helidon-http-media-jsonp</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.logging</groupId>
      <artifactId>helidon-logging-jul</artifactId>
      <version>${helidon.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.observe</groupId>
      <artifactId>helidon-webserver-observe-metrics</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.metrics</groupId>
      <artifactId>helidon-metrics-system-meters</artifactId>
      <version>${helidon.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.messaging</groupId>
      <artifactId>helidon-messaging</artifactId>
      <version>${helidon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.messaging.kafka</groupId>
      <artifactId>helidon-messaging-kafka</artifactId>
      <version>${helidon.version}</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${version.lib.slf4j}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
      <version>${versio.kafka.clients}</version>
      <exclusions>
        <exclusion>
          <groupId>org.xerial.snappy</groupId>
          <artifactId>snappy-java</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.github.luben</groupId>
          <artifactId>zstd-jni</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
      <version>1.1.10.5</version>
    </dependency>
    <dependency>
      <groupId>com.github.luben</groupId>
      <artifactId>zstd-jni</artifactId>
      <version>1.5.6-4</version>
      <classifier>linux_amd64</classifier>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-protobuf-serializer</artifactId>
      <version>${version.kafka.protobuf.serializer}</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${version.lib.google-protobuf}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.webclient</groupId>
      <artifactId>helidon-webclient</artifactId>
      <version>${helidon.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.testing.junit5</groupId>
      <artifactId>helidon-webserver-testing-junit5</artifactId>
      <version>${helidon.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.testing</groupId>
      <artifactId>helidon-microprofile-testing-junit5</artifactId>
      <version>${helidon.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${version.lib.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${version.lib.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${version.lib.hamcrest}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>${version.lib.hamcrest}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jcabi</groupId>
      <artifactId>jcabi-matchers</artifactId>
      <version>1.8.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <version>${version.lib.junit-platform}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-suite-engine</artifactId>
      <version>${version.lib.junit-platform}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.graalvm.buildtools</groupId>
      <artifactId>junit-platform-native</artifactId>
      <version>${version.lib.junit.platform.native}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${version.plugin.os}</version>
      </extension>
    </extensions>
    <resources>
      <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
             -->
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
             -->
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${version.plugin.shade}</version>
          <dependencies>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm</artifactId>
              <version>${version.lib.asm}</version>
            </dependency>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm-commons</artifactId>
              <version>${version.lib.asm}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <shadedArtifactAttached>true</shadedArtifactAttached>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.xolstice.maven.plugins</groupId>
          <artifactId>protobuf-maven-plugin</artifactId>
          <version>${version.plugin.protobuf}</version>
          <configuration>
            <protocArtifact>
              com.google.protobuf:protoc:${version.lib.google-protobuf}:exe:${os.detected.classifier}
            </protocArtifact>
            <pluginId>grpc-java</pluginId>
            <pluginArtifact>
              io.grpc:protoc-gen-grpc-java:${version.lib.grpc}:exe:${os.detected.classifier}
            </pluginArtifact>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>test-compile</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.plugin.compiler}</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <optimize>true</optimize>
            <showWarnings>true</showWarnings>
            <failOnWarning>true</failOnWarning>
            <showDeprecation>true</showDeprecation>
            <proc>full</proc>
            <compilerArgs>
              <arg>-Xlint</arg>
              <arg>-Xlint:-path</arg>
              <!--  @see https://stackoverflow.com/questions/6770455  -->
              <arg>-Xpkginfo:always</arg>
              <!--  @see https://stackoverflow.com/questions/44675503/why-safevarargs-doesnt-suppress-the-warning  -->
              <arg>-Xlint:-varargs</arg>
              <!--  @see https://blogs.oracle.com/darcy/entry/bootclasspath_older_source  -->
              <arg>-Xlint:-options</arg>
              <!--  @see http://netbeans.org/bugzilla/show_bug.cgi?format=multiple&id=208666  -->
              <!--  this is to avoid a problem with ANTLR and JDK7  -->
              <arg>-Xlint:-classfile</arg>
              <!--  ignore APT warnings  -->
              <arg>-Xlint:-processing</arg>
            </compilerArgs>
            <testExcludes>
              <exclude>**/package-info.java</exclude>
            </testExcludes>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${version.plugin.dependency}</version>
          <executions>
            <execution>
              <id>copy-libs</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/libs</outputDirectory>
                <overWriteReleases>false</overWriteReleases>
                <overWriteSnapshots>false</overWriteSnapshots>
                <overWriteIfNewer>true</overWriteIfNewer>
                <includeScope>runtime</includeScope>
                <!-- Hack to work-around https://github.com/square/okio/issues/1306 -->
                <excludeArtifactIds>okio</excludeArtifactIds>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${version.plugin.resources}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${version.plugin.jar}</version>
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <classpathPrefix>libs</classpathPrefix>
                <!--suppress MavenModelInspection -->
                <mainClass>${mainClass}</mainClass>
                <useUniqueVersions>false</useUniqueVersions>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.graalvm.buildtools</groupId>
          <artifactId>native-maven-plugin</artifactId>
          <version>${version.plugin.nativeimage}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${version.plugin.failsafe}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.44.0</version>
        <configuration>
          <images>
            <image>
              <alias>${kafka.name}</alias>
              <name>${kafka.image}</name>
              <run>
                <hostname>${kafka.name}</hostname>
                <env>
                  <KAFKA_CFG_NODE_ID>0</KAFKA_CFG_NODE_ID>
                  <KAFKA_CFG_PROCESS_ROLES>controller,broker</KAFKA_CFG_PROCESS_ROLES>
                  <KAFKA_CFG_LISTENERS>PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094</KAFKA_CFG_LISTENERS>
                  <KAFKA_CFG_ADVERTISED_LISTENERS>PLAINTEXT://${kafka.name}:9092,EXTERNAL://localhost:9094</KAFKA_CFG_ADVERTISED_LISTENERS>
                  <KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
                  <KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>0@${kafka.name}:9093</KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>
                  <KAFKA_CFG_CONTROLLER_LISTENER_NAMES>CONTROLLER</KAFKA_CFG_CONTROLLER_LISTENER_NAMES>
                </env>
                <ports>
                  <port>9094:9094</port>
                </ports>
              </run>
            </image>
            <image>
              <alias>${schema-registry.name}</alias>
              <name>${schema-registry.image}</name>
              <run>
                <hostname>${schema-registry.name}</hostname>
                <env>
                  <SCHEMA_REGISTRY_KAFKA_BROKERS>PLAINTEXT://${kafka.name}:9092</SCHEMA_REGISTRY_KAFKA_BROKERS>
                  <SCHEMA_REGISTRY_LISTENERS>http://0.0.0.0:8081</SCHEMA_REGISTRY_LISTENERS>
                  <SCHEMA_REGISTRY_DEBUG>true</SCHEMA_REGISTRY_DEBUG>
                </env>
                <ports>
                  <port>8081:8081</port>
                </ports>
                <links>
                  <link>${kafka.name}</link>
                </links>
                <wait>
                  <http>
                    <url>http://localhost:8081/v1/metadata/id</url>
                  </http>
                  <time>100000</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <!-- "build" should be used to create the images with the
                   artifact -->
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/KafkaProtoTestIT.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>integrotest</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.44.0</version>
            <configuration>
              <images>
                <image>
                  <alias>${kafka.name}</alias>
                  <name>${kafka.image}</name>
                  <run>
                    <hostname>${kafka.name}</hostname>
                    <env>
                      <KAFKA_CFG_NODE_ID>0</KAFKA_CFG_NODE_ID>
                      <KAFKA_CFG_PROCESS_ROLES>controller,broker</KAFKA_CFG_PROCESS_ROLES>
                      <KAFKA_CFG_LISTENERS>PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094</KAFKA_CFG_LISTENERS>
                      <KAFKA_CFG_ADVERTISED_LISTENERS>PLAINTEXT://${kafka.name}:9092,EXTERNAL://localhost:9094</KAFKA_CFG_ADVERTISED_LISTENERS>
                      <KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
                      <KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>0@${kafka.name}:9093</KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>
                      <KAFKA_CFG_CONTROLLER_LISTENER_NAMES>CONTROLLER</KAFKA_CFG_CONTROLLER_LISTENER_NAMES>
                    </env>
                    <ports>
                      <port>9094:9094</port>
                    </ports>
                  </run>
                </image>
                <image>
                  <alias>${schema-registry.name}</alias>
                  <name>${schema-registry.image}</name>
                  <run>
                    <hostname>${schema-registry.name}</hostname>
                    <env>
                      <SCHEMA_REGISTRY_KAFKA_BROKERS>PLAINTEXT://${kafka.name}:9092</SCHEMA_REGISTRY_KAFKA_BROKERS>
                      <SCHEMA_REGISTRY_LISTENERS>http://0.0.0.0:8081</SCHEMA_REGISTRY_LISTENERS>
                      <SCHEMA_REGISTRY_DEBUG>true</SCHEMA_REGISTRY_DEBUG>
                    </env>
                    <ports>
                      <port>8081:8081</port>
                    </ports>
                    <links>
                      <link>${kafka.name}</link>
                    </links>
                    <wait>
                      <http>
                        <url>http://localhost:8081/v1/metadata/id</url>
                      </http>
                      <time>100000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <!-- "build" should be used to create the images with the
                       artifact -->
                  <goal>build</goal>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <property>
          <name>env</name>
          <value>dev</value>
        </property>
      </activation>
      <properties>
        <musl>--verbose</musl>
      </properties>
    </profile>
    <profile>
      <id>alpine</id>
      <activation>
        <property>
          <name>env</name>
          <value>alpine</value>
        </property>
      </activation>
      <properties>
        <musl>${alpine}</musl>
      </properties>
      <build>
        <resources>
          <!--
                Filter resources in "process-resources" phase
                @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
                 -->
          <resource>
            <directory>${basedir}/src/main/alpine</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>env</name>
          <value>native</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
          </plugin>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <extensions>true</extensions>
            <executions>
              <execution>
                <id>build-native</id>
                <goals>
                  <goal>compile-no-fork</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <useArgFile>true</useArgFile>
                  <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                  <imageName>${project.build.finalName}</imageName>
                  <fallback>false</fallback>
                  <classpath>${project.build.directory}/libs,${project.build.directory}/${project.build.finalName}.jar</classpath>
                  <buildArgs>
                    <arg>${musl}</arg>
                  </buildArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>io.helidon.integrations.graal</groupId>
          <artifactId>helidon-graal-native-image-extension</artifactId>
          <version>${helidon.version}</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
  <repositories>
    <repository>
      <id>confluent</id>
      <name>confluent</name>
      <url>https://packages.confluent.io/maven</url>
    </repository>
  </repositories>
</project>
