# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Micronaut Docker CI for alpine

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  TEST_TAG: pejetuz/micronaut-native:test
  LATEST_TAG: pejetuz/micronaut-native:latest

jobs:
  build:
    runs-on: ubuntu-latest
    name: Micronaut-Kafka-GraalVM builds for alpine
    timeout-minutes: 15
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:micronaut/websocket"
          load: true
          push: false
          tags: ${{ env.TEST_TAG }}

  test-image:
    runs-on: ubuntu-latest
    name: Test image
    timeout-minutes: 15
    services:
      kafka:
        image: bitnami/kafka:3.9.0
        env:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: "controller,broker"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      schema-registry:
        image: bitnami/schema-registry:7.8.0
        env:
          SCHEMA_REGISTRY_KAFKA_BROKERS: "PLAINTEXT://kafka:9092"
          SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
          KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
          SCHEMA_REGISTRY_DEBUG: "true"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up GraalVM 23
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '23'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          cache: maven
      -
        name: Maven version
        run: mvn -version
      -
        name: Test image
        id: test
        run: |
          TAG="$(date +%s)"
          echo tag = "$TAG"
#          docker build --file micronaut/websocket/Dockerfile.alpine --tag micronaut-native:$TAG --build-arg KAFKA_BOOTSTRAP_SERVERS=kafka:9092 --build-arg SCHEMA_REGISTRY_URL=http://schema-registry:8081 micronaut/websocket
#          echo image build complete
#          docker run --rm --name micronaut-native -p 8080:8080 -d micronaut-native:$TAG
          docker run --rm -p 8080:8080 -d ${{ env.TEST_TAG }}
          echo image running
          echo echo `nc -vz localhost 8080`
          mvn clean verify package -f micronaut/websocket/src/it/pom.xml
          echo echo `nc -vz localhost 8080`
          java -jar micronaut/websocket/src/it/target/wsclient-0.1.jar
          echo echo `nc -vz localhost 8080`
